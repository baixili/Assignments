#BlueJ class context
comment0.target=Robot
comment1.params=
comment1.target=void\ move()
comment1.text=\r\n\ Move\ forward\ one\ step.\r\n
comment10.params=
comment10.target=int\ getOpponentFB()
comment10.text=\r\n\ Gets\ the\ front-back-location\ of\ the\ other\ robot\ relative\ to\ the\ current\r\n\ position\ and\ orientation.\r\n\ \r\n\ @return\ INFINITY\ if\ there\ isn't\ a\ second\ robot,\ +ve\ if\ in\ front,\ -ve\ if\r\n\ \ \ \ \ \ \ \ \ behind\ and\ 0\ if\ directly\ to\ the\ left\ or\ right.\r\n
comment11.params=
comment11.target=int\ numBarrels()
comment11.text=\r\n\ @return\ The\ number\ of\ barrels\ currently\ in\ the\ world\r\n
comment12.params=
comment12.target=int\ getClosestBarrelLR()
comment12.text=\r\n\ Left-right-location\ of\ the\ closest\ fuel\ barrel\ relative\ to\ the\ current\r\n\ position\ and\ orientation.\r\n\ \r\n\ @return\ INFINTY\ if\ there\ are\ no\ barrels,\ -ve\ if\ to\ the\ left,\ +ve\ if\ to\r\n\ \ \ \ \ \ \ \ \ the\ right\ and\ 0\ if\ directly\ in\ front\ or\ behind\r\n
comment13.params=
comment13.target=int\ getClosestBarrelFB()
comment13.text=\r\n\ Front-back-location\ of\ the\ closest\ fuel\ barrel\ relative\ to\ the\ current\r\n\ position\ and\ orientation.\r\n\ \r\n\ @return\ INFINTY\ if\ there\ are\ no\ barrels,\ +ve\ if\ in\ front,\ -ve\ if\ behind\r\n\ \ \ \ \ \ \ \ \ and\ 0\ if\ directly\ to\ the\ left\ or\ right.\r\n
comment14.params=n
comment14.target=int\ getBarrelLR(int)
comment14.text=\r\n\ Left-right-location\ of\ the\ nth\ fuel\ barrel\ relative\ to\ the\ current\r\n\ position\ and\ orientation.\r\n\ \r\n\ @return\ INFINTY\ if\ there\ are\ less\ than\ n\ barrels,\ -ve\ if\ to\ the\ left,\ +ve\r\n\ \ \ \ \ \ \ \ \ if\ to\ the\ right\ and\ 0\ if\ directly\ in\ front\ or\ behind\r\n
comment15.params=n
comment15.target=int\ getBarrelFB(int)
comment15.text=\r\n\ Front-back-location\ of\ the\ nth\ fuel\ barrel\ relative\ to\ the\ current\r\n\ position\ and\ orientation.\r\n\ \r\n\ @return\ INFINITY\ if\ there\ are\ less\ than\ n\ barrels,\ +ve\ if\ in\ front,\ -ve\r\n\ \ \ \ \ \ \ \ \ if\ behind\ and\ 0\ if\ directly\ to\ the\ left\ or\ right.\r\n
comment16.params=
comment16.target=int\ getFuel()
comment16.text=\r\n\ Gets\ the\ amount\ of\ fuel\ this\ robot\ has\ remaining.\r\n\ \r\n\ @return\r\n
comment17.params=
comment17.target=boolean\ isShieldOn()
comment17.text=\r\n\ @return\ boolean\ stating\ whether\ the\ shield\ is\ currently\ on.\r\n
comment18.params=world\ x\ y\ colour\ noWait
comment18.target=Robot(World,\ int,\ int,\ java.lang.String,\ boolean)
comment19.params=prog
comment19.target=void\ setProgram(ProgramNode)
comment19.text=\r\n\ Set\ the\ program\ of\ this\ robot,\ if\ the\ controller\ represents\ is\ a\ valid\r\n\ program\r\n
comment2.params=
comment2.target=void\ turnLeft()
comment2.text=\r\n\ Turn\ 90\ degrees\ to\ the\ left\r\n
comment20.params=
comment20.target=void\ run()
comment20.text=\r\n\ Start\ this\ robot\ running.\ If\ it\ has\ a\ valid\ program,,\ then\ executes\ the\r\n\ program,\ passing\ in\ the\ robot.\ Otherwise,\ calls\ the\ default\ program.\r\n
comment21.params=
comment21.target=void\ cancel()
comment21.text=\r\n\ Unblocks\ execution\ of\ this\ robot\ and\ hopefully\ completes\ its\ execution.\r\n\ Don't\ call\ this\ yourself.\r\n
comment22.params=finished
comment22.target=void\ setFinished(boolean)
comment22.text=\r\n\ Called\ when\ execution\ of\ a\ robot's\ code\ completes.\ You\ do\ not\ need\ to\ do\r\n\ this\ yourself.\r\n\ \r\n\ @param\ finished\r\n
comment23.params=g2d\ time
comment23.target=void\ draw(java.awt.Graphics2D,\ double)
comment23.text=\r\n\ Called\ by\ the\ GUI\ only.\r\n\ \r\n\ @param\ g2d\r\n\ @param\ time\r\n
comment24.params=
comment24.target=boolean\ isDead()
comment25.params=
comment25.target=java.awt.Point\ getOtherRobotPosition()
comment26.params=p
comment26.target=java.awt.Point\ toRelative(java.awt.Point)
comment27.params=direction
comment27.target=double\ getAngle(Robot.DIRECTION)
comment28.params=
comment28.target=void\ processFuel()
comment29.params=
comment29.target=void\ processFuelAndBlock()
comment3.params=
comment3.target=void\ turnRight()
comment3.text=\r\n\ Turn\ 90\ degrees\ to\ the\ right\r\n
comment30.params=
comment30.target=void\ updatePending()
comment30.text=\r\n\ Called\ by\ the\ "World"\ only.\r\n
comment31.params=p1\ p2
comment31.target=int\ compare(java.awt.Point,\ java.awt.Point)
comment32.params=
comment32.target=java.lang.String\ toString()
comment33.params=action
comment33.target=void\ debug(java.lang.String)
comment33.text=\r\n\ print\ a\ message\ about\ the\ action\ to\ System.out\ if\ debugging\ is\ currently\r\n\ turned\ on.\r\n
comment34.params=
comment34.target=void\ defaultProgram()
comment34.text=\r\n\ What\ the\ robot\ will\ do\ if\ it\ has\ no\ valid\ controller\r\n
comment35.params=
comment35.target=void\ readState()
comment35.text=\r\n\ Encodes\ the\ state\ of\ the\ robot,\ used\ for\ automarking.\r\n
comment4.params=
comment4.target=void\ turnAround()
comment4.text=\r\n\ Turn\ 180\ degrees.\r\n
comment5.params=shield
comment5.target=void\ setShield(boolean)
comment5.text=\r\n\ Set\ the\ shield\ to\ true\ or\ false.\ When\ the\ shield\ is\ on,\ the\ other\ robot\r\n\ cannot\ steal\ fuel,\ but\ this\ robot\ will\ use\ up\ fuel\ faster.\r\n
comment6.params=
comment6.target=void\ takeFuel()
comment6.text=\r\n\ Take\ fuel\ barrel\ or\ siphon\ fuel\ from\ other\ robot.\r\n
comment7.params=
comment7.target=void\ idleWait()
comment7.text=\r\n\ Do\ nothing\ and\ wait.\r\n
comment8.params=
comment8.target=int\ getDistanceToWall()
comment8.text=\r\n\ Distance\ to\ the\ wall\ directly\ in\ front\ of\ the\ robot\ relative\ to\ its\r\n\ current\ orientation.\r\n\ \r\n\ @return\r\n
comment9.params=
comment9.target=int\ getOpponentLR()
comment9.text=\r\n\ Gets\ the\ left-right-location\ of\ the\ other\ robot\ relative\ to\ the\ current\r\n\ position\ and\ orientation.\r\n\ \r\n\ @return\ INFINITY\ if\ there\ isn't\ a\ second\ robot,\ -ve\ if\ to\ the\ left,\ +ve\r\n\ \ \ \ \ \ \ \ \ if\ to\ the\ right\ and\ 0\ if\ directly\ in\ front\ or\ behind\r\n
numComments=36
