#BlueJ class context
comment0.target=NetworkViewer
comment1.params=
comment1.target=javafx.scene.Scene\ setupGUI()
comment1.text=\r\n\ Create\ the\ GUI,\ by\ constructing\ the\ Scene\ with\ its\ hierarchy\ of\ components.\r\n
comment10.params=event
comment10.target=void\ handleWalkingDistanceSlider(javafx.scene.input.MouseEvent)
comment10.text=\r\n\ \ Handles\ entering\ distance\ on\ the\ walking\ slider.\r\n\ \ Sets\ the\ text\ field\r\n\ \ recomputes\ the\ walking\ edges\r\n
comment11.params=
comment11.target=void\ resetSearch()
comment11.text=\ Reset\ the\ search\ parameters\ and\ the\ path\ because\ the\ graph\ has\ changed.\r\n\ \ WILL\ NEED\ TO\ BE\ MODIFIED\ FOR\ THE\ COMPONENTS\ OR\ ARTICULATION\ PTS\ VERSION\r\n\ \ (since\ they\ don't\ use\ the\ pathEdges\ or\ start\ and\ goal\ locations.)\r\n
comment12.params=event
comment12.target=void\ handleStartGoalKey(javafx.scene.input.KeyEvent)
comment12.text=\r\n\ Key\ typing\ event\ for\ the\ Start\ text\ field\r\n\ \ Entering\ characters\ will\ display\ a\ list\ of\ the\ stops\ with\r\n\ \ names\ matching\ the\ characters\ so\ far.\r\n
comment13.params=event
comment13.target=void\ handleStartAction(javafx.event.ActionEvent)
comment13.text=\r\n\ When\ ENTER\ is\ pressed,\ set\ the\ start\ location\r\n\ Call\ shortestPath\ finder\ to\ get\ path\ and\ draw\ graph.\r\n
comment14.params=event
comment14.target=void\ handleGoalAction(javafx.event.ActionEvent)
comment14.text=\r\n\ When\ ENTER\ is\ pressed,\ set\ the\ goal\ location\r\n\ Call\ shortestPath\ finder\ to\ get\ path\ and\ draw\ graph.\r\n
comment15.params=event
comment15.target=void\ handleMouseClick(javafx.scene.input.MouseEvent)
comment15.text=\r\n\ Handle\ Mouse\ clicks\ on\ the\ canvas\ to\ select\ start/goal\ locations.\r\n\ Find\ the\ node\ closest\ to\ the\ click\ then\r\n\ \ If\ shift\ key,\ always\ set\ goal\ location\r\n\ \ If\ start\ location\ is\ empty\:\ \ set\ start\ location\ \r\n\ \ If\ goal\ location\ is\ empty\:\ \ \ set\ goal\ location\ \ \ \ \r\n\ \ If\ both\ locations\ not\ empty\:\ move\ goal\ location\ to\ start\ and\ set\ new\ goal\ location\r\n\r\n\ Call\ AStart\ shortestPath\ finder\ to\ get\ path\ and\ draw\ graph.\r\n
comment16.params=stop
comment16.target=void\ setStartLocation(Stop)
comment16.text=Set\ start\ location\ and\ display\ it
comment17.params=stop
comment17.target=void\ setGoalLocation(Stop)
comment17.text=Set\ goal\ location\ and\ display\ it
comment18.params=loc\ graph
comment18.target=Stop\ findClosestStop(GisPoint,\ Graph)
comment18.text=\r\n\ Find\ the\ closest\ stop\ to\ the\ given\ Gis\ Point\ location\r\n\ @param\ x\r\n\ @param\ y\r\n\ @param\ graph\r\n\ @return\r\n
comment19.params=event
comment19.target=void\ handleMouseScroll(javafx.scene.input.ScrollEvent)
comment2.params=
comment2.target=double\ getScale()
comment20.params=event
comment20.target=void\ handleMousePressed(javafx.scene.input.MouseEvent)
comment21.params=event
comment21.target=void\ handleMouseDrag(javafx.scene.input.MouseEvent)
comment22.params=dataDirectory
comment22.target=boolean\ loadData(java.nio.file.Path)
comment22.text=\r\n\ Load\ the\ stops\ and\ lines\ data\ from\ the\ given\ directory,\r\n\ Load\ the\ fare\ zones\ data\r\n\ Create\ the\ graph\ and\ display\ the\ graph\r\n\ DO\ NOT\ MODIFY\ THESE\ METHODS\ FOR\ PARTS\ 1,\ 2\ or\ 3\ -\ IT\ IS\ NEEDED\ FOR\ MARKING.\r\n
comment23.params=stopsFile
comment23.target=java.util.Map\ loadStops(java.nio.file.Path)
comment23.text=\ Load\ the\ stop\ data\ from\ the\ stop\ file\r\n\ file\ contains\ a\ line\ for\ each\ stop\:\r\n\ \ \ \ \ stop_id,\ stop_code,\ stop_name,\ stop_desc,\r\n\ \ \ \ \ stop_lat,\ stop_lon,\ zone_id,\ location_type,\r\n\ \ \ \ \ parent_station,\ stop_url,\ stop_timezone\r\n\ \ Note\ that\ there\ is\ a\ header\ line\ in\ the\ file.\r\n\ \ Not\ all\ the\ info\ for\ each\ stop\ is\ necessary\r\n\ Returns\ a\ Map\ of\ all\ the\ Stops\:\r\n\ \ \ key\ \=\ the\ stop_id\r\n\ \ \ value\ \=\ a\ Stop\ object\ containing\ the\ name,\ id,\ longitude,\ and\ latitude\r\n
comment24.params=lineFile\ stopMap
comment24.target=java.util.Collection\ loadLines(java.nio.file.Path,\ java.util.Map)
comment24.text=\ Load\ the\ line\ data\ from\ the\ lines\ file\r\n\ File\ contains\:\ line_id,\ stop_id,\ timepoint\r\n\ Uses\ the\ stopMap\ to\ turn\ the\ stop_id's\ into\ Stops\r\n
comment25.params=
comment25.target=void\ reportLoad()
comment25.text=\r\n\ Report\ details\ of\ a\ successful\ data\ load\r\n
comment26.params=graph
comment26.target=void\ drawMap(Graph)
comment26.text=\r\n\ Draw\ the\ current\ graph,\ along\ with\ the\ current\ path,\ if\ there\ is\ one.\r\n\ If\ there\ is\ a\ path,\ it\ also\ updates\ the\ displayText\ text\ area\ with\ a\r\n\ text\ description\ of\ the\ path.\r\n
comment27.params=
comment27.target=void\ drawPath()
comment27.text=\r\n\ Draw\ the\ list\ of\ Path\ Edges\ (eg,\ returned\ from\ A*\ search)\r\n
comment28.params=
comment28.target=void\ reportPath()
comment28.text=\r\n\ Constructs\ a\ String\ description\ of\ the\ current\ path\ (if\ there\ is\ one)\r\n\ and\ puts\ it\ in\ the\ displayText\ text\ area.\r\n\ Assumes\ that\ the\ edges\ in\ the\ current\ path\ are\ in\ order\ from\ the\ start\ node\ to\ the\ goal\ node\r\n
comment29.params=edge
comment29.target=void\ drawEdge(Edge)
comment29.text=\r\n\ Draw\ an\ edge\ in\ the\ graph\r\n\ The\ color\ of\ the\ edge\ depends\ on\ the\ transportation\ type.\r\n
comment3.params=
comment3.target=GisPoint\ getOrigin()
comment30.params=edge
comment30.target=void\ drawHighlightedEdge(Edge)
comment30.text=\r\n\ Draw\ a\ highlighted\ edge\ \ (for\ the\ path)\r\n\ The\ color\ of\ the\ edge\ depends\ on\ the\ transportation\ type.\r\n
comment31.params=edge\ width\ color
comment31.target=void\ drawEdge(Edge,\ double,\ javafx.scene.paint.Color)
comment31.text=\r\n\ Draw\ an\ edge\ with\ specified\ width\ and\ color\r\n
comment32.params=stop\ size\ color
comment32.target=void\ drawStop(Stop,\ double,\ javafx.scene.paint.Color)
comment32.text=\r\n\ Draw\ a\ stop\ with\ the\ given\ size\ and\ color.\r\n
comment33.params=gc
comment33.target=void\ drawFareZones(javafx.scene.canvas.GraphicsContext)
comment33.text=\r\n\ Draw\ the\ fare\ zones\ (if\ it\ exists)\r\n\ This\ shows\ the\ outline\ of\ Wellington.\r\n
comment4.params=
comment4.target=javafx.scene.canvas.Canvas\ getMapCanvas()
comment5.params=
comment5.target=double\ getRatioLatLon()
comment6.params=
comment6.target=void\ initialise()
comment6.text=\r\n\ Entry\ Method\:\ (Called\ by\ Main\ once\ the\ GUI\ has\ been\ set\ up)\r\n\ Loads\ data\ into\ the\ graph\ from\ the\ 'data-full'\ directory.\r\n\ Then\ draws\ the\ map.\r\n
comment7.params=event
comment7.target=void\ handleReload(javafx.event.ActionEvent)
comment7.text=\r\n\ Handle\ the\ ReloadButton\ by\ selecting\ the\ directory\ which\ should\ have\ the\ data\ files\ in\ it.\r\n
comment8.params=event
comment8.target=void\ handleQuit(javafx.event.ActionEvent)
comment8.text=\r\n\ Handle\ the\ QuitButton\ \r\n
comment9.params=event
comment9.target=void\ handleWalkingDistance(javafx.event.ActionEvent)
comment9.text=\r\n\ \ Handles\ entering\ distance\ in\ the\ text\ field\r\n\ \ Sets\ the\ walking\ slider.\r\n\ \ recomputes\ the\ walking\ edges\r\n
numComments=34
